#!/bin/zsh 

environmentlc(){
    cat /opt/datadog/etc/environment | cut -c 5-
}

environmentuc(){
    cat /opt/datadog/etc/environment | cut -c 5- | tr '[a-z]' '[A-Z]'
}

vpc_tag(){
    ip=$(myip)
    if [[ "$ip" == 172.* ]]; then
        echo "VPC"
    else
        echo "Classic"
    fi
}

maintags(){
    cat /etc/update-motd.d/95-roles | sed -e '1,/Tags/d' | head -n-1 | sort -t\: -k2 -n | awk -F: '{ if (el[$1] == "") { el[$1]=$2; } else el[$1]=el[$1]","$2 } END {for (i in el) {printf( i":"el[i]"\n" ) } } ' | paste -d',' -s -
}

mainroles(){
    cat /etc/update-motd.d/95-roles | awk '/Roles/{a=1;next}/Tags/{a=0}a' | grep -Ev "^$|encrypted-storage|agent-prod-to-staging|canary-security-logging|go-perf" | paste -d',' -s - 
}

refreshtools(){
    cd ~/.jumpbox-tools
    git pull
    ./installs.sh
    ./links.sh
    cd -
    exec zsh
}

instance_to_ip() {
    local instance="$1"
    consul-cli catalog service datadog | jq -r ".[] | select ( .Node == \"$instance\" ) | .Address "
}

update_tmux_window_format() {
    local ip="$1"
    local role="$(tags_from_ip $ip)"
    if [ -n "$TMUX" ]; then
        tmux -q setw window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] ${role}:#W" > /dev/null
        tmux -q setw window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] ${role}:#W" > /dev/null
    fi
}

do_ssh () {
    local ip="$1"
    update_tmux_window_format "$ip"
    ssh -A $ip
    update_tmux_window_format $(myip)
}

jr(){
    local ip=$(consul-cli catalog service datadog --tag="$1" | jq -r ".[].Address" | head -1)
    if [[ -z "$ip" ]]; then 
        echo "Unkown role"
        return 1
    fi
    ~/.jumpbox-tools/deploy_tools $ip
    update_tmux_window_format $ip
    do_ssh $ip
}

ji(){
    local ip="$1"
    if [[ "$ip" != 1* ]]; then 
        ip=$(instance_to_ip $1)
    fi
    if [[ -z "$ip" ]]; then
        echo "No ip for $1"
        return 1
    fi
    ~/.jumpbox-tools/deploy_tools $ip
    update_tmux_window_format $ip
    do_ssh $ip
}

jt(){
    local instance=$(echo $1 | awk -F"_" '{print $2}')
    ji $instance
}

tags_from_ip() {
    consul-cli catalog service datadog | jq -r -c ".[] | select ( .Address | contains(\"$1\") ) | .ServiceTags | map(select(. != \"dd-process-agent\" and . != \"agent-prod-to-staging\" and . != \"canary-security-logging\" and . != \"go-perf\" and (contains(\"az-\") | not) ) ) | join(\",\") "
}

tags_from_host() {
    consul-cli catalog service datadog | jq -r -c ".[] | select ( .Node | contains(\"$1\") ) | .ServiceTags | map(select(. != \"dd-process-agent\" and . != \"agent-prod-to-staging\" and . != \"canary-security-logging\" . != \"go-perf\" and (contains(\"az-\") | not) ) ) | join(\",\") "
}

chosts_by_role() {
    if [ "$1" == "" ]; then
        consul-cli catalog service datadog --tag="$1" | jq -r ".[].Node" | sort | uniq
    fi
}

cip_by_role() {
    consul-cli catalog service datadog --tag="$1" | jq -r ".[].Address" | sort | uniq
}

pg() {
    sudo -u postgres psql -p 5433 dogdata$(environmentlc)
}

# Thanks @miketheman
howold ()
{
    if [ -f /etc/created ]; then
        created=`cat /etc/created`;
    else
        echo "Can't determine how old this node is, it must be very old!";
        exit 1;
    fi;
    _time=$(expr `date +%s` - $created);
    _days=`printf "scale=0;$_time / 86400\n" | bc -l`;
    _hours=`printf "scale=0;($_time / 3600) - ($_days * 24)\n"  | bc -l `;
    _minutes=`printf "scale=0;($_time / 60) - ($_days * 1440) - ($_hours * 60)\n" | bc -l`;
    _seconds=`printf "scale=0;$_time %% 60\n" | bc -l`;
    printf "This node was created: ";
    printf "${_days:-0}-Day(s)/${_hours:-0}-Hour(s)/";
    printf "${_minutes:-0}-Minute(s)/${_seconds:-0}-Second(s)";
    printf " ago.\n"
}

howbig() {
    cat /etc/motd | grep Instance
}

sudog () {
    sudo -u dog $@
}

sudogq () {
    sudo -u dog dogq $@
}

mq () {
    sudogq metric_query $@
}

gosource() {
    export PATH=~/code/bin:~/go/bin:$PATH
    export GOPATH=~/code
    export GOROOT=~/go
}

goinstall() {
    cd ~
    rm -rf ~/go
    rm -f go*tar.gz
    wget https://dd-pastebin.s3.amazonaws.com/leo/go1.7.3.linux-amd64.tar.gz
    tar zxf go1.7.3.linux-amd64.tar.gz -C ~/
    rm -rf ~/code
    mkdir -p ~/code/src/github.com/DataDog

    git clone git@github.com:DataDog/dd-go ~/code/src/github.com/DataDog/dd-go
    git clone git@github.com:DataDog/raclette ~/code/src/github.com/DataDog/raclette
    gosource

    go get github.com/robfig/glock
    cd -
}

knife () {
    /usr/bin/knife $1 -c /etc/chef/knife.rb ${@:2}
}

myip() {
    ip addr show $(ifconfig | head -n1 | awk '{print $1}') | grep -oP 'inet 1\d+.\d+.\d+.\d+' | cut -c 6-
}

ff() {
    find . -iname "*$1*"
}

lastoffset(){
    topic=$1
    partition=$2
    sudo -u kafka /usr/local/kafka/kafka_*/bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list "$(myip):9092" --topic $topic --partitions $partition --time -1
}

resource(){
    source ~/.zshenv
    source ~/.zshrc
}

ksearch() {
    knife search node $1 -a ec2.placement_availability_zone -a ec2.instance_type -a tags -a roles -a uptime_in_seconds
}

alias hosts_by_role=chosts_by_role
